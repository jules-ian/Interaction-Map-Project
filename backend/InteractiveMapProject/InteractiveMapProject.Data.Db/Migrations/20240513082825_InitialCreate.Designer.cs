// <auto-generated />
using System;
using InteractiveMapProject.Data.Db.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InteractiveMapProject.Data.Db.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240513082825_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ProfessionalId")
                        .HasColumnType("char(36)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.Audience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Audiences", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ae46826-0a6f-48f5-ba9e-a7b1e6ac8786"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "0-3 ans"
                        },
                        new
                        {
                            Id = new Guid("498c8fbd-ce9d-4d74-b1af-4ffd6ced08d0"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "3-6 ans"
                        },
                        new
                        {
                            Id = new Guid("4f5177aa-fbe1-418c-8e29-c53fd57de0c1"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "6-12 ans"
                        },
                        new
                        {
                            Id = new Guid("dae32a6b-8991-49ae-97f4-59fe8d607552"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "12-18 ans"
                        },
                        new
                        {
                            Id = new Guid("bb1cc290-0fc8-404a-854a-c2b0aae68c80"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Parents"
                        },
                        new
                        {
                            Id = new Guid("946127b6-6086-49ae-9d37-74fea6f28b9e"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Professionnels"
                        });
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.Mission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Missions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aac34d8b-9e9c-4e22-84be-7eb2bf9e45a9"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Accueil de loisirs"
                        },
                        new
                        {
                            Id = new Guid("b798e3aa-dc15-4edf-9e71-c5022d309bd8"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Culture et loisirs"
                        },
                        new
                        {
                            Id = new Guid("bdd1387d-1a50-4dca-968f-ec92bf11ca7c"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Petite enfance"
                        },
                        new
                        {
                            Id = new Guid("3fcb1d8e-e488-4f5a-b48f-c948f47679a5"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Répit"
                        },
                        new
                        {
                            Id = new Guid("b796ae0d-fca2-4fd5-af81-091ab862c3e6"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Accueil occasionnel"
                        },
                        new
                        {
                            Id = new Guid("40ddc0af-3771-4985-afa5-41dee83aab40"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Accueil d’urgence"
                        },
                        new
                        {
                            Id = new Guid("aae7815a-a9cc-4d3c-8576-49a072c078bb"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Scolarité"
                        },
                        new
                        {
                            Id = new Guid("a1b17a70-be7f-40a6-abab-d0a26dfa2a7a"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Accueil de nuit"
                        },
                        new
                        {
                            Id = new Guid("51fe1c6b-f4fa-4ca2-bbfa-fa619ec8e652"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Soins/santé"
                        },
                        new
                        {
                            Id = new Guid("3c18485e-0085-4482-8c2f-aeb9925e9281"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Rééducation"
                        },
                        new
                        {
                            Id = new Guid("af9d2f8e-d9cc-4d6f-81c2-2239aca90532"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Accompagnement à la parentalité"
                        },
                        new
                        {
                            Id = new Guid("2b2060e8-297f-4bee-8b88-67d651e8ae40"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Accompagnement administratif"
                        },
                        new
                        {
                            Id = new Guid("dc45ccb9-7437-46ea-809b-ed531f06bc7a"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Group de parole/Ateliers"
                        },
                        new
                        {
                            Id = new Guid("f65849f3-41f2-4108-9996-d7fd69fcbbbe"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Information/orientation"
                        });
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.PendingProfessionalAudience", b =>
                {
                    b.Property<Guid>("PendingProfessionalId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AudienceId")
                        .HasColumnType("char(36)");

                    b.HasKey("PendingProfessionalId", "AudienceId");

                    b.HasIndex("AudienceId");

                    b.ToTable("PendingProfessionalsAudiences", (string)null);
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.PendingProfessionalMission", b =>
                {
                    b.Property<Guid>("PendingProfessionalId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MissionId")
                        .HasColumnType("char(36)");

                    b.HasKey("PendingProfessionalId", "MissionId");

                    b.HasIndex("MissionId");

                    b.ToTable("PendingProfessionalsMissions", (string)null);
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.PendingProfessionalPlaceOfIntervention", b =>
                {
                    b.Property<Guid>("PendingProfessionalId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PlaceOfInterventionId")
                        .HasColumnType("char(36)");

                    b.HasKey("PendingProfessionalId", "PlaceOfInterventionId");

                    b.HasIndex("PlaceOfInterventionId");

                    b.ToTable("PendingProfessionalsPlacesOfIntervention", (string)null);
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.PlaceOfIntervention", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PlacesOfIntervention", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("33638c12-e1ac-4508-8717-741884e87136"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Domicile"
                        },
                        new
                        {
                            Id = new Guid("49ff9e12-3f70-4835-9627-3a1b36bfbd09"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "EAJE"
                        },
                        new
                        {
                            Id = new Guid("6023fbc8-85cb-4589-b8d8-1408c3a27964"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "École"
                        },
                        new
                        {
                            Id = new Guid("a4d58208-fc49-41e1-bb58-64e856cd238c"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Structure individuelle"
                        },
                        new
                        {
                            Id = new Guid("dd417045-5bf9-4a70-810b-15b6bab90e96"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Structure de soins"
                        },
                        new
                        {
                            Id = new Guid("d081df8c-d78f-47ea-8854-733693a57765"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Institution"
                        },
                        new
                        {
                            Id = new Guid("be305923-75e1-43ea-87d0-c73ab7400db7"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Structure d’orientation et d’information"
                        },
                        new
                        {
                            Id = new Guid("9d570b69-19a6-4a72-b703-b2a64b84c2f9"),
                            CreationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tiers lieu"
                        });
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.ProfessionalAudience", b =>
                {
                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AudienceId")
                        .HasColumnType("char(36)");

                    b.HasKey("ProfessionalId", "AudienceId");

                    b.HasIndex("AudienceId");

                    b.ToTable("ProfessionalsAudiences", (string)null);
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.ProfessionalMission", b =>
                {
                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MissionId")
                        .HasColumnType("char(36)");

                    b.HasKey("ProfessionalId", "MissionId");

                    b.HasIndex("MissionId");

                    b.ToTable("ProfessionalsMissions", (string)null);
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.ProfessionalPlaceOfIntervention", b =>
                {
                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PlaceOfInterventionId")
                        .HasColumnType("char(36)");

                    b.HasKey("ProfessionalId", "PlaceOfInterventionId");

                    b.HasIndex("PlaceOfInterventionId");

                    b.ToTable("ProfessionalsPlacesOfIntervention", (string)null);
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.PendingProfessional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EstablishmentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ManagementType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ProfessionalId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ValidationStatusId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalId");

                    b.HasIndex("ValidationStatusId");

                    b.ToTable("PendingProfessionals", (string)null);
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.Professional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EstablishmentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ManagementType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ValidationStatusId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ValidationStatusId");

                    b.ToTable("Professionals", (string)null);
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.ValidationStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ValidationStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("793127fc-5427-4471-b161-58bd68c6636a"),
                            Name = "Approved"
                        },
                        new
                        {
                            Id = new Guid("be4ce02e-e478-4168-bfc9-22d541acfcd6"),
                            Name = "Waiting After Creation"
                        },
                        new
                        {
                            Id = new Guid("bd7990de-181a-4cb5-9e80-8f8b1caccdd7"),
                            Name = "Waiting After Update"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.PendingProfessionalAudience", b =>
                {
                    b.HasOne("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.Audience", "Audience")
                        .WithMany("PendingProfessionals")
                        .HasForeignKey("AudienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InteractiveMapProject.Contracts.Entities.PendingProfessional", "PendingProfessional")
                        .WithMany("Audiences")
                        .HasForeignKey("PendingProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audience");

                    b.Navigation("PendingProfessional");
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.PendingProfessionalMission", b =>
                {
                    b.HasOne("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.Mission", "Mission")
                        .WithMany("PendingProfessionals")
                        .HasForeignKey("MissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InteractiveMapProject.Contracts.Entities.PendingProfessional", "PendingProfessional")
                        .WithMany("Missions")
                        .HasForeignKey("PendingProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mission");

                    b.Navigation("PendingProfessional");
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.PendingProfessionalPlaceOfIntervention", b =>
                {
                    b.HasOne("InteractiveMapProject.Contracts.Entities.PendingProfessional", "PendingProfessional")
                        .WithMany("PlacesOfIntervention")
                        .HasForeignKey("PendingProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.PlaceOfIntervention", "PlaceOfIntervention")
                        .WithMany("PendingProfessionals")
                        .HasForeignKey("PlaceOfInterventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PendingProfessional");

                    b.Navigation("PlaceOfIntervention");
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.ProfessionalAudience", b =>
                {
                    b.HasOne("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.Audience", "Audience")
                        .WithMany("Professionals")
                        .HasForeignKey("AudienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InteractiveMapProject.Contracts.Entities.Professional", "Professional")
                        .WithMany("Audiences")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audience");

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.ProfessionalMission", b =>
                {
                    b.HasOne("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.Mission", "Mission")
                        .WithMany("Professionals")
                        .HasForeignKey("MissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InteractiveMapProject.Contracts.Entities.Professional", "Professional")
                        .WithMany("Missions")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mission");

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.ProfessionalPlaceOfIntervention", b =>
                {
                    b.HasOne("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.PlaceOfIntervention", "PlaceOfIntervention")
                        .WithMany("Professionals")
                        .HasForeignKey("PlaceOfInterventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InteractiveMapProject.Contracts.Entities.Professional", "Professional")
                        .WithMany("PlacesOfIntervention")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaceOfIntervention");

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.PendingProfessional", b =>
                {
                    b.HasOne("InteractiveMapProject.Contracts.Entities.Professional", "Professional")
                        .WithMany("PendingProfessionals")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("InteractiveMapProject.Contracts.Entities.ValidationStatus", "ValidationStatus")
                        .WithMany("PendingProfessionals")
                        .HasForeignKey("ValidationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("InteractiveMapProject.Contracts.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("PendingProfessionalId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("PendingProfessionalId");

                            b1.ToTable("PendingProfessionals");

                            b1.WithOwner()
                                .HasForeignKey("PendingProfessionalId");
                        });

                    b.OwnsOne("InteractiveMapProject.Contracts.Entities.ContactPerson", "ContactPerson", b1 =>
                        {
                            b1.Property<Guid>("PendingProfessionalId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Function")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("PendingProfessionalId");

                            b1.ToTable("PendingProfessionals");

                            b1.WithOwner()
                                .HasForeignKey("PendingProfessionalId");
                        });

                    b.OwnsOne("InteractiveMapProject.Contracts.Entities.Geolocation", "Geolocation", b1 =>
                        {
                            b1.Property<Guid>("PendingProfessionalId")
                                .HasColumnType("char(36)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double");

                            b1.HasKey("PendingProfessionalId");

                            b1.ToTable("PendingProfessionals");

                            b1.WithOwner()
                                .HasForeignKey("PendingProfessionalId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ContactPerson")
                        .IsRequired();

                    b.Navigation("Geolocation")
                        .IsRequired();

                    b.Navigation("Professional");

                    b.Navigation("ValidationStatus");
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.Professional", b =>
                {
                    b.HasOne("InteractiveMapProject.Contracts.Entities.ValidationStatus", "ValidationStatus")
                        .WithMany("Professionals")
                        .HasForeignKey("ValidationStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("InteractiveMapProject.Contracts.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ProfessionalId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("ProfessionalId");

                            b1.ToTable("Professionals");

                            b1.WithOwner()
                                .HasForeignKey("ProfessionalId");
                        });

                    b.OwnsOne("InteractiveMapProject.Contracts.Entities.ContactPerson", "ContactPerson", b1 =>
                        {
                            b1.Property<Guid>("ProfessionalId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Function")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("ProfessionalId");

                            b1.ToTable("Professionals");

                            b1.WithOwner()
                                .HasForeignKey("ProfessionalId");
                        });

                    b.OwnsOne("InteractiveMapProject.Contracts.Entities.Geolocation", "Geolocation", b1 =>
                        {
                            b1.Property<Guid>("ProfessionalId")
                                .HasColumnType("char(36)");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double");

                            b1.HasKey("ProfessionalId");

                            b1.ToTable("Professionals");

                            b1.WithOwner()
                                .HasForeignKey("ProfessionalId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ContactPerson")
                        .IsRequired();

                    b.Navigation("Geolocation")
                        .IsRequired();

                    b.Navigation("ValidationStatus");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InteractiveMapProject.Contracts.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InteractiveMapProject.Contracts.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InteractiveMapProject.Contracts.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InteractiveMapProject.Contracts.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.Audience", b =>
                {
                    b.Navigation("PendingProfessionals");

                    b.Navigation("Professionals");
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.Mission", b =>
                {
                    b.Navigation("PendingProfessionals");

                    b.Navigation("Professionals");
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.FieldOfIntervention.PlaceOfIntervention", b =>
                {
                    b.Navigation("PendingProfessionals");

                    b.Navigation("Professionals");
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.PendingProfessional", b =>
                {
                    b.Navigation("Audiences");

                    b.Navigation("Missions");

                    b.Navigation("PlacesOfIntervention");
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.Professional", b =>
                {
                    b.Navigation("Audiences");

                    b.Navigation("Missions");

                    b.Navigation("PendingProfessionals");

                    b.Navigation("PlacesOfIntervention");
                });

            modelBuilder.Entity("InteractiveMapProject.Contracts.Entities.ValidationStatus", b =>
                {
                    b.Navigation("PendingProfessionals");

                    b.Navigation("Professionals");
                });
#pragma warning restore 612, 618
        }
    }
}
